#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";

require('../utilities/StringUtils');

// require('../utilities/weixin/Tokens');

let log4js = require('log4js');

log4js.configure({
    appenders: [{
        type: 'console',
        layout: {
            type: 'pattern',
            pattern: "[%d][%[%p%]][" + process.pid + "][" + process.env.NODE_ENV +" web] - %m"
        }
    }],
    replaceConsole: true
});
log4js.setGlobalLogLevel(log4js.levels.DEBUG);
// var heapdump = require('heapdump');
// heapdump.writeSnapshot('./' + Date.now() + '.heapsnapshot');
let run = function () {
    let app = require('../app');
    let http = require('http');

    /**
     * Get port from environment and store in Express.
     */

    let port = normalizePort(process.env.PORT || '3000');
    // app.set('port', port);

    /**
     * Create HTTP server.
     */

    let server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    // server.listen(port);
    server.on('error', onError);
// server.on('listening', onListening);
    server.listen(port, '0.0.0.0', 20000, onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        let port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:

                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.debug('Listening on ' + bind);
    }
};

// if (process.env.PRO) {
//     run()
// } else {
//     require('../buildJade').build(result => {
//         if (result) {
//             run();
//         } else {
//             console.error('build jade error');
//         }
//     });
// }

// setInterval(function () {
//     console.log("aa");
// },5000)
run();

//require('../utilities/zookeeper')

